**********************************************************************
                           Linux for Tegra
                         Trusty keystore-demo
                                README
**********************************************************************
This README provides an overview of the keystore-demo TA and the
default EKB binary. This TA is intended to be used for the encrypted
keyblob feature.

----------------------------------------------------------------------
Keystore-demo TA Overview
----------------------------------------------------------------------

The Trusty source package contains a TA named keystore-demo, which is
intended to serve as a starting point for developers to implement
their encrypted keyblob solution. The TA shows how to perform the
following steps from the 'Keyblob Decryption' section of the
'Encrypted Keyblob' description in the 'Development Guide'.


* Deriving EKB_EK                       (step 1)
* Acquiring EKB content ciphertext      (step 2)
* Decrypting EKB contents with EKB_EK   (step 3)

  The keystore-demo TA only implements a psuedo-example of the
  decryption step. The decryption should be re-implemented using a
  crypto algorithm using the chosen crypto library.

The keystore-demo TA is located inside the trusty application
directory (see the 'Development Guide' for more details). The TA
assumes that the default EKB binary is flashed on the device's EKS
partition.

----------------------------------------------------------------------
EKB_EK Derivation and Testing
----------------------------------------------------------------------

The keystore-demo TA demonstrates how to derive EKB_EK from EKB_RK
using SE. The TA also provides an EKB_EK derivation test which can be
used to see if the derivation is working as expected.

----------------------- EKB_EK Derivation Test -----------------------

By default, the KEK2 fuse is not burned (meaning EKB_RK is a zero
KEY), and the default fixed vector (FV) will be used. In this
situation, the resulting EKB_EK 'test' key will match the following:

   test_ekb_ek = AES-128-ECB(default fv, zero key)

This is called a test key because it is not secure to use in
production.

The EKB_EK derivation test compares the EKB_EK derived by the device
to a precomputed 'test_ekb_ek'.

----------------------------------------------------------------------
Default EKB Binary
----------------------------------------------------------------------

The first 16 bytes of the EKB content section contain a non-null
terminated string 'secret message!!' which has been XOR'ed with the
EKB_EK test key (derived from a zero EKB_RK and the default FV). The
rest of the EKB content contaisn unencrypted null bytes which pad the
total EKB binary size to 1028 bytes.

The default EKB binary is located at:
<Linux_for_Tegra>/bootloader/eks.img

----------------------------------------------------------------------
XOR Decryption of Default EKB Contents
----------------------------------------------------------------------

The keystore demo TA XORs the first 16 bytes of the EKB contents with
the derived EKB_EK key (the test_ekb_ek by default), then compares the
resulting 16-byte string to the 'secret message!!' string.
